package coyote.commons.jdbc.datasource;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import coyote.commons.Assert;


public abstract class StatementProxy implements Statement {

  public final Statement _statement;




  public StatementProxy( final Statement statement ) {
    Assert.argumentIsNotNull( statement, "Statement must not be null" );
    _statement = statement;
  }




  @Override
  public void addBatch( final String sql ) throws SQLException {
    _statement.addBatch( sql );
  }




  @Override
  public void cancel() throws SQLException {
    _statement.cancel();
  }




  @Override
  public void clearBatch() throws SQLException {
    _statement.clearBatch();
  }




  @Override
  public void clearWarnings() throws SQLException {
    _statement.clearWarnings();
  }




  @Override
  public void close() throws SQLException {
    _statement.close();
  }




  @Override
  public void closeOnCompletion() throws SQLException {
    _statement.closeOnCompletion();
  }




  @Override
  public boolean execute( final String sql ) throws SQLException {
    return _statement.execute( sql );
  }




  @Override
  public boolean execute( final String sql, final int autoGeneratedKeys ) throws SQLException {
    return _statement.execute( sql, autoGeneratedKeys );
  }




  @Override
  public boolean execute( final String sql, final int[] columnIndexes ) throws SQLException {
    return _statement.execute( sql, columnIndexes );
  }




  @Override
  public boolean execute( final String sql, final String[] columnNames ) throws SQLException {
    return _statement.execute( sql, columnNames );
  }




  @Override
  public int[] executeBatch() throws SQLException {
    return _statement.executeBatch();
  }




  @Override
  public ResultSet executeQuery( final String sql ) throws SQLException {
    return _statement.executeQuery( sql );
  }




  @Override
  public int executeUpdate( final String sql ) throws SQLException {
    return _statement.executeUpdate( sql );
  }




  @Override
  public int executeUpdate( final String sql, final int autoGeneratedKeys ) throws SQLException {
    return _statement.executeUpdate( sql, autoGeneratedKeys );
  }




  @Override
  public int executeUpdate( final String sql, final int[] columnIndexes ) throws SQLException {
    return _statement.executeUpdate( sql, columnIndexes );
  }




  @Override
  public int executeUpdate( final String sql, final String[] columnNames ) throws SQLException {
    return _statement.executeUpdate( sql, columnNames );
  }




  @Override
  public Connection getConnection() throws SQLException {
    return _statement.getConnection();
  }




  @Override
  public int getFetchDirection() throws SQLException {
    return _statement.getFetchDirection();
  }




  @Override
  public int getFetchSize() throws SQLException {
    return _statement.getFetchSize();
  }




  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    return _statement.getGeneratedKeys();
  }




  @Override
  public int getMaxFieldSize() throws SQLException {
    return _statement.getMaxFieldSize();
  }




  @Override
  public int getMaxRows() throws SQLException {
    return _statement.getMaxRows();
  }




  @Override
  public boolean getMoreResults() throws SQLException {
    return _statement.getMoreResults();
  }




  @Override
  public boolean getMoreResults( final int current ) throws SQLException {
    return _statement.getMoreResults( current );
  }




  @Override
  public int getQueryTimeout() throws SQLException {
    return _statement.getQueryTimeout();
  }




  @Override
  public ResultSet getResultSet() throws SQLException {
    return _statement.getResultSet();
  }




  @Override
  public int getResultSetConcurrency() throws SQLException {
    return _statement.getResultSetConcurrency();
  }




  @Override
  public int getResultSetHoldability() throws SQLException {
    return _statement.getResultSetHoldability();
  }




  @Override
  public int getResultSetType() throws SQLException {
    return _statement.getResultSetType();
  }




  @Override
  public int getUpdateCount() throws SQLException {
    return _statement.getUpdateCount();
  }




  @Override
  public SQLWarning getWarnings() throws SQLException {
    return _statement.getWarnings();
  }




  @Override
  public boolean isClosed() throws SQLException {
    return _statement.isClosed();
  }




  @Override
  public boolean isCloseOnCompletion() throws SQLException {
    return _statement.isCloseOnCompletion();
  }




  @Override
  public boolean isPoolable() throws SQLException {
    return _statement.isPoolable();
  }




  @Override
  public boolean isWrapperFor( final Class<?> iface ) throws SQLException {
    if ( iface == null ) {
      throw new SQLException( "iface must not be null" );
    }
    return iface.isInstance( _statement );
  }




  @Override
  public void setCursorName( final String name ) throws SQLException {
    _statement.setCursorName( name );
  }




  @Override
  public void setEscapeProcessing( final boolean enable ) throws SQLException {
    _statement.setEscapeProcessing( enable );
  }




  @Override
  public void setFetchDirection( final int direction ) throws SQLException {
    _statement.setFetchDirection( direction );
  }




  @Override
  public void setFetchSize( final int rows ) throws SQLException {
    _statement.setFetchSize( rows );
  }




  @Override
  public void setMaxFieldSize( final int max ) throws SQLException {
    _statement.setMaxFieldSize( max );
  }




  @Override
  public void setMaxRows( final int max ) throws SQLException {
    _statement.setMaxRows( max );
  }




  @Override
  public void setPoolable( final boolean poolable ) throws SQLException {
    _statement.setPoolable( poolable );
  }




  @Override
  public void setQueryTimeout( final int seconds ) throws SQLException {
    _statement.setQueryTimeout( seconds );
  }




  @Override
  @SuppressWarnings("unchecked")
  public <T> T unwrap( final Class<T> intrfce ) throws SQLException {
    if ( intrfce == null ) {
      throw new SQLException( "interface must not be null" );
    }
    if ( !intrfce.isInstance( _statement ) ) {
      throw new SQLException( String.format( "No object found that implements the interface: %s", intrfce ) );
    }
    return (T)_statement;
  }
}
