package coyote.commons.jdbc.datasource;

import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import coyote.commons.Assert;


/**
 * A simple DataSource implementation. All connections from this DataSource
 * will be generated by {@link java.sql.DriverManager}
 */
public class SimpleDataSource extends AbstractDataSource {

  private final String _url;
  private final String _username;
  private final String _password;




  /**
   * Construct a SimpleDataSource with JDBC Driver class name and a database
   * url
   * @param className the name of a {@link java.sql.Driver} implementation class
   * @param url the URL to the database
   * 
   * @throws ClassNotFoundException if the class name is not found
   */
  public SimpleDataSource( final String className, final String url ) throws ClassNotFoundException {
    this( className, url, null, null );
  }




  /**
   * Construct a SimpleDataSource with JDBC Driver class name, a database url
   * and a username of the database instance
   * 
   * @param className the name of a {@link java.sql.Driver} implementation class
   * @param url the URL to the database
   * @param username the _username to the database instance
   * 
   * @throws ClassNotFoundException if the class name is not found
   */
  public SimpleDataSource( final String className, final String url, final String username ) throws ClassNotFoundException {
    this( className, url, username, null );
  }




  /**
   * Construct a SimpleDataSource with JDBC Driver class name, a database url
   * and username/password pairs of the database instance
   * 
   * @param className the name of a {@link java.sql.Driver} implementation class
   * @param url the URL to the database
   * @param username the _username to the database instance
   * @param password the _password of the _username
   * 
   * @throws ClassNotFoundException
   */
  public SimpleDataSource( final String className, final String url, final String username, final String password ) throws ClassNotFoundException {
    Assert.argumentIsNotNull( className, "className must not be null" );
    Assert.argumentIsNotNull( url, "url must not be null" );

    Class.forName( className );

    _url = url;
    _username = username;
    _password = password;
  }




  /**
   * Attempts to establish a connection with the data source using the url,
   * username, password passed during the construction.
   * 
   * @return the connection with the data source
   * 
   * @throws SQLException when there is any exception occurred when establishing the connection
   */
  @Override
  public Connection getConnection() throws SQLException {
    return DriverManager.getConnection( _url, _username, _password );
  }




  /**
   * Attempts to establish a connection with the data source using the url
   * which is passed during the construction, and username/password pairs
   * overriding the original configuration.
   * 
   * @param username the username to the database instance
   * @param password the password of the _username
   * 
   * @return the connection with the data source
   * 
   * @throws SQLException when there is any exception occurred when establishing the connection
   */
  @Override
  public Connection getConnection( final String username, final String password ) throws SQLException {
    return DriverManager.getConnection( _url, username, password );
  }




  /**
   * {@inheritDoc}
   */
  @Override
  public int getLoginTimeout() throws SQLException {
    return DriverManager.getLoginTimeout();
  }




  /**
   * {@inheritDoc}
   */
  @Override
  public PrintWriter getLogWriter() throws SQLException {
    return DriverManager.getLogWriter();
  }




  /**
   * {@inheritDoc}
   */
  @Override
  public void setLoginTimeout( final int seconds ) throws SQLException {
    DriverManager.setLoginTimeout( seconds );
  }




  /**
   * {@inheritDoc}
   */
  @Override
  public void setLogWriter( final PrintWriter out ) throws SQLException {
    DriverManager.setLogWriter( out );
  }
}
