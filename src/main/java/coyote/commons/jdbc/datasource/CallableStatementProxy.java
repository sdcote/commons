package coyote.commons.jdbc.datasource;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Map;


public abstract class CallableStatementProxy implements CallableStatement {

  private final CallableStatement _callableStatement;




  public CallableStatementProxy( final CallableStatement callableStatement ) {
    this._callableStatement = callableStatement;
  }




  @Override
  public void addBatch() throws SQLException {
    _callableStatement.addBatch();
  }




  @Override
  public void addBatch( final String sql ) throws SQLException {
    _callableStatement.addBatch( sql );
  }




  @Override
  public void cancel() throws SQLException {
    _callableStatement.cancel();
  }




  @Override
  public void clearBatch() throws SQLException {
    _callableStatement.clearBatch();
  }




  @Override
  public void clearParameters() throws SQLException {
    _callableStatement.clearParameters();
  }




  @Override
  public void clearWarnings() throws SQLException {
    _callableStatement.clearWarnings();
  }




  @Override
  public void close() throws SQLException {
    _callableStatement.close();
  }




  @Override
  public void closeOnCompletion() throws SQLException {
    _callableStatement.closeOnCompletion();
  }




  @Override
  public boolean execute() throws SQLException {
    return _callableStatement.execute();
  }




  @Override
  public boolean execute( final String sql ) throws SQLException {
    return _callableStatement.execute( sql );
  }




  @Override
  public boolean execute( final String sql, final int autoGeneratedKeys ) throws SQLException {
    return _callableStatement.execute( sql, autoGeneratedKeys );
  }




  @Override
  public boolean execute( final String sql, final int[] columnIndexes ) throws SQLException {
    return _callableStatement.execute( sql, columnIndexes );
  }




  @Override
  public boolean execute( final String sql, final String[] columnNames ) throws SQLException {
    return _callableStatement.execute( sql, columnNames );
  }




  @Override
  public int[] executeBatch() throws SQLException {
    return _callableStatement.executeBatch();
  }




  @Override
  public ResultSet executeQuery() throws SQLException {
    return _callableStatement.executeQuery();
  }




  @Override
  public ResultSet executeQuery( final String sql ) throws SQLException {
    return _callableStatement.executeQuery( sql );
  }




  @Override
  public int executeUpdate() throws SQLException {
    return _callableStatement.executeUpdate();
  }




  @Override
  public int executeUpdate( final String sql ) throws SQLException {
    return _callableStatement.executeUpdate( sql );
  }




  @Override
  public int executeUpdate( final String sql, final int autoGeneratedKeys ) throws SQLException {
    return _callableStatement.executeUpdate( sql, autoGeneratedKeys );
  }




  @Override
  public int executeUpdate( final String sql, final int[] columnIndexes ) throws SQLException {
    return _callableStatement.executeUpdate( sql, columnIndexes );
  }




  @Override
  public int executeUpdate( final String sql, final String[] columnNames ) throws SQLException {
    return _callableStatement.executeUpdate( sql, columnNames );
  }




  @Override
  public Array getArray( final int parameterIndex ) throws SQLException {
    return _callableStatement.getArray( parameterIndex );
  }




  @Override
  public Array getArray( final String parameterName ) throws SQLException {
    return _callableStatement.getArray( parameterName );
  }




  @Override
  public BigDecimal getBigDecimal( final int parameterIndex ) throws SQLException {
    return _callableStatement.getBigDecimal( parameterIndex );
  }




  @Override
  public BigDecimal getBigDecimal( final int parameterIndex, final int scale ) throws SQLException {
    return _callableStatement.getBigDecimal( parameterIndex, scale );
  }




  @Override
  public BigDecimal getBigDecimal( final String parameterName ) throws SQLException {
    return _callableStatement.getBigDecimal( parameterName );
  }




  @Override
  public Blob getBlob( final int parameterIndex ) throws SQLException {
    return _callableStatement.getBlob( parameterIndex );
  }




  @Override
  public Blob getBlob( final String parameterName ) throws SQLException {
    return _callableStatement.getBlob( parameterName );
  }




  @Override
  public boolean getBoolean( final int parameterIndex ) throws SQLException {
    return _callableStatement.getBoolean( parameterIndex );
  }




  @Override
  public boolean getBoolean( final String parameterName ) throws SQLException {
    return _callableStatement.getBoolean( parameterName );
  }




  @Override
  public byte getByte( final int parameterIndex ) throws SQLException {
    return _callableStatement.getByte( parameterIndex );
  }




  @Override
  public byte getByte( final String parameterName ) throws SQLException {
    return _callableStatement.getByte( parameterName );
  }




  @Override
  public byte[] getBytes( final int parameterIndex ) throws SQLException {
    return _callableStatement.getBytes( parameterIndex );
  }




  @Override
  public byte[] getBytes( final String parameterName ) throws SQLException {
    return _callableStatement.getBytes( parameterName );
  }




  @Override
  public Reader getCharacterStream( final int parameterIndex ) throws SQLException {
    return _callableStatement.getCharacterStream( parameterIndex );
  }




  @Override
  public Reader getCharacterStream( final String parameterName ) throws SQLException {
    return _callableStatement.getCharacterStream( parameterName );
  }




  @Override
  public Clob getClob( final int parameterIndex ) throws SQLException {
    return _callableStatement.getClob( parameterIndex );
  }




  @Override
  public Clob getClob( final String parameterName ) throws SQLException {
    return _callableStatement.getClob( parameterName );
  }




  @Override
  public Connection getConnection() throws SQLException {
    return _callableStatement.getConnection();
  }




  @Override
  public Date getDate( final int parameterIndex ) throws SQLException {
    return _callableStatement.getDate( parameterIndex );
  }




  @Override
  public Date getDate( final int parameterIndex, final Calendar cal ) throws SQLException {
    return _callableStatement.getDate( parameterIndex, cal );
  }




  @Override
  public Date getDate( final String parameterName ) throws SQLException {
    return _callableStatement.getDate( parameterName );
  }




  @Override
  public Date getDate( final String parameterName, final Calendar cal ) throws SQLException {
    return _callableStatement.getDate( parameterName, cal );
  }




  @Override
  public double getDouble( final int parameterIndex ) throws SQLException {
    return _callableStatement.getDouble( parameterIndex );
  }




  @Override
  public double getDouble( final String parameterName ) throws SQLException {
    return _callableStatement.getDouble( parameterName );
  }




  @Override
  public int getFetchDirection() throws SQLException {
    return _callableStatement.getFetchDirection();
  }




  @Override
  public int getFetchSize() throws SQLException {
    return _callableStatement.getFetchSize();
  }




  @Override
  public float getFloat( final int parameterIndex ) throws SQLException {
    return _callableStatement.getFloat( parameterIndex );
  }




  @Override
  public float getFloat( final String parameterName ) throws SQLException {
    return _callableStatement.getFloat( parameterName );
  }




  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    return _callableStatement.getGeneratedKeys();
  }




  @Override
  public int getInt( final int parameterIndex ) throws SQLException {
    return _callableStatement.getInt( parameterIndex );
  }




  @Override
  public int getInt( final String parameterName ) throws SQLException {
    return _callableStatement.getInt( parameterName );
  }




  @Override
  public long getLong( final int parameterIndex ) throws SQLException {
    return _callableStatement.getLong( parameterIndex );
  }




  @Override
  public long getLong( final String parameterName ) throws SQLException {
    return _callableStatement.getLong( parameterName );
  }




  @Override
  public int getMaxFieldSize() throws SQLException {
    return _callableStatement.getMaxFieldSize();
  }




  @Override
  public int getMaxRows() throws SQLException {
    return _callableStatement.getMaxRows();
  }




  @Override
  public ResultSetMetaData getMetaData() throws SQLException {
    return _callableStatement.getMetaData();
  }




  @Override
  public boolean getMoreResults() throws SQLException {
    return _callableStatement.getMoreResults();
  }




  @Override
  public boolean getMoreResults( final int current ) throws SQLException {
    return _callableStatement.getMoreResults( current );
  }




  @Override
  public Reader getNCharacterStream( final int parameterIndex ) throws SQLException {
    return _callableStatement.getNCharacterStream( parameterIndex );
  }




  @Override
  public Reader getNCharacterStream( final String parameterName ) throws SQLException {
    return _callableStatement.getNCharacterStream( parameterName );
  }




  @Override
  public NClob getNClob( final int parameterIndex ) throws SQLException {
    return _callableStatement.getNClob( parameterIndex );
  }




  @Override
  public NClob getNClob( final String parameterName ) throws SQLException {
    return _callableStatement.getNClob( parameterName );
  }




  @Override
  public String getNString( final int parameterIndex ) throws SQLException {
    return _callableStatement.getNString( parameterIndex );
  }




  @Override
  public String getNString( final String parameterName ) throws SQLException {
    return _callableStatement.getNString( parameterName );
  }




  @Override
  public Object getObject( final int parameterIndex ) throws SQLException {
    return _callableStatement.getObject( parameterIndex );
  }




  @Override
  public <T> T getObject( final int parameterIndex, final Class<T> type ) throws SQLException {
    return _callableStatement.getObject( parameterIndex, type );
  }




  @Override
  public Object getObject( final int parameterIndex, final Map<String, Class<?>> map ) throws SQLException {
    return _callableStatement.getObject( parameterIndex, map );
  }




  @Override
  public Object getObject( final String parameterName ) throws SQLException {
    return _callableStatement.getObject( parameterName );
  }




  @Override
  public <T> T getObject( final String parameterName, final Class<T> type ) throws SQLException {
    return _callableStatement.getObject( parameterName, type );
  }




  @Override
  public Object getObject( final String parameterName, final Map<String, Class<?>> map ) throws SQLException {
    return _callableStatement.getObject( parameterName, map );
  }




  @Override
  public ParameterMetaData getParameterMetaData() throws SQLException {
    return _callableStatement.getParameterMetaData();
  }




  @Override
  public int getQueryTimeout() throws SQLException {
    return _callableStatement.getQueryTimeout();
  }




  @Override
  public Ref getRef( final int parameterIndex ) throws SQLException {
    return _callableStatement.getRef( parameterIndex );
  }




  @Override
  public Ref getRef( final String parameterName ) throws SQLException {
    return _callableStatement.getRef( parameterName );
  }




  @Override
  public ResultSet getResultSet() throws SQLException {
    return _callableStatement.getResultSet();
  }




  @Override
  public int getResultSetConcurrency() throws SQLException {
    return _callableStatement.getResultSetConcurrency();
  }




  @Override
  public int getResultSetHoldability() throws SQLException {
    return _callableStatement.getResultSetHoldability();
  }




  @Override
  public int getResultSetType() throws SQLException {
    return _callableStatement.getResultSetType();
  }




  @Override
  public RowId getRowId( final int parameterIndex ) throws SQLException {
    return _callableStatement.getRowId( parameterIndex );
  }




  @Override
  public RowId getRowId( final String parameterName ) throws SQLException {
    return _callableStatement.getRowId( parameterName );
  }




  @Override
  public short getShort( final int parameterIndex ) throws SQLException {
    return _callableStatement.getShort( parameterIndex );
  }




  @Override
  public short getShort( final String parameterName ) throws SQLException {
    return _callableStatement.getShort( parameterName );
  }




  @Override
  public SQLXML getSQLXML( final int parameterIndex ) throws SQLException {
    return _callableStatement.getSQLXML( parameterIndex );
  }




  @Override
  public SQLXML getSQLXML( final String parameterName ) throws SQLException {
    return _callableStatement.getSQLXML( parameterName );
  }




  @Override
  public String getString( final int parameterIndex ) throws SQLException {
    return _callableStatement.getString( parameterIndex );
  }




  @Override
  public String getString( final String parameterName ) throws SQLException {
    return _callableStatement.getString( parameterName );
  }




  @Override
  public Time getTime( final int parameterIndex ) throws SQLException {
    return _callableStatement.getTime( parameterIndex );
  }




  @Override
  public Time getTime( final int parameterIndex, final Calendar cal ) throws SQLException {
    return _callableStatement.getTime( parameterIndex, cal );
  }




  @Override
  public Time getTime( final String parameterName ) throws SQLException {
    return _callableStatement.getTime( parameterName );
  }




  @Override
  public Time getTime( final String parameterName, final Calendar cal ) throws SQLException {
    return _callableStatement.getTime( parameterName, cal );
  }




  @Override
  public Timestamp getTimestamp( final int parameterIndex ) throws SQLException {
    return _callableStatement.getTimestamp( parameterIndex );
  }




  @Override
  public Timestamp getTimestamp( final int parameterIndex, final Calendar cal ) throws SQLException {
    return _callableStatement.getTimestamp( parameterIndex, cal );
  }




  @Override
  public Timestamp getTimestamp( final String parameterName ) throws SQLException {
    return _callableStatement.getTimestamp( parameterName );
  }




  @Override
  public Timestamp getTimestamp( final String parameterName, final Calendar cal ) throws SQLException {
    return _callableStatement.getTimestamp( parameterName, cal );
  }




  @Override
  public int getUpdateCount() throws SQLException {
    return _callableStatement.getUpdateCount();
  }




  @Override
  public URL getURL( final int parameterIndex ) throws SQLException {
    return _callableStatement.getURL( parameterIndex );
  }




  @Override
  public URL getURL( final String parameterName ) throws SQLException {
    return _callableStatement.getURL( parameterName );
  }




  @Override
  public SQLWarning getWarnings() throws SQLException {
    return _callableStatement.getWarnings();
  }




  @Override
  public boolean isClosed() throws SQLException {
    return _callableStatement.isClosed();
  }




  @Override
  public boolean isCloseOnCompletion() throws SQLException {
    return _callableStatement.isCloseOnCompletion();
  }




  @Override
  public boolean isPoolable() throws SQLException {
    return _callableStatement.isPoolable();
  }




  @Override
  public boolean isWrapperFor( final Class<?> iface ) throws SQLException {
    return _callableStatement.isWrapperFor( iface );
  }




  @Override
  public void registerOutParameter( final int parameterIndex, final int sqlType ) throws SQLException {
    _callableStatement.registerOutParameter( parameterIndex, sqlType );
  }




  @Override
  public void registerOutParameter( final int parameterIndex, final int sqlType, final int scale ) throws SQLException {
    _callableStatement.registerOutParameter( parameterIndex, sqlType, scale );
  }




  @Override
  public void registerOutParameter( final int parameterIndex, final int sqlType, final String typeName ) throws SQLException {
    _callableStatement.registerOutParameter( parameterIndex, sqlType, typeName );
  }




  @Override
  public void registerOutParameter( final String parameterName, final int sqlType ) throws SQLException {
    _callableStatement.registerOutParameter( parameterName, sqlType );
  }




  @Override
  public void registerOutParameter( final String parameterName, final int sqlType, final int scale ) throws SQLException {
    _callableStatement.registerOutParameter( parameterName, sqlType, scale );
  }




  @Override
  public void registerOutParameter( final String parameterName, final int sqlType, final String typeName ) throws SQLException {
    _callableStatement.registerOutParameter( parameterName, sqlType, typeName );
  }




  @Override
  public void setArray( final int parameterIndex, final Array x ) throws SQLException {
    _callableStatement.setArray( parameterIndex, x );
  }




  @Override
  public void setAsciiStream( final int parameterIndex, final InputStream x ) throws SQLException {
    _callableStatement.setAsciiStream( parameterIndex, x );
  }




  @Override
  public void setAsciiStream( final int parameterIndex, final InputStream x, final int length ) throws SQLException {
    _callableStatement.setAsciiStream( parameterIndex, x, length );
  }




  @Override
  public void setAsciiStream( final int parameterIndex, final InputStream x, final long length ) throws SQLException {
    _callableStatement.setAsciiStream( parameterIndex, x, length );
  }




  @Override
  public void setAsciiStream( final String parameterName, final InputStream x ) throws SQLException {
    _callableStatement.setAsciiStream( parameterName, x );
  }




  @Override
  public void setAsciiStream( final String parameterName, final InputStream x, final int length ) throws SQLException {
    _callableStatement.setAsciiStream( parameterName, x, length );
  }




  @Override
  public void setAsciiStream( final String parameterName, final InputStream x, final long length ) throws SQLException {
    _callableStatement.setAsciiStream( parameterName, x, length );
  }




  @Override
  public void setBigDecimal( final int parameterIndex, final BigDecimal x ) throws SQLException {
    _callableStatement.setBigDecimal( parameterIndex, x );
  }




  @Override
  public void setBigDecimal( final String parameterName, final BigDecimal x ) throws SQLException {
    _callableStatement.setBigDecimal( parameterName, x );
  }




  @Override
  public void setBinaryStream( final int parameterIndex, final InputStream x ) throws SQLException {
    _callableStatement.setBinaryStream( parameterIndex, x );
  }




  @Override
  public void setBinaryStream( final int parameterIndex, final InputStream x, final int length ) throws SQLException {
    _callableStatement.setBinaryStream( parameterIndex, x, length );
  }




  @Override
  public void setBinaryStream( final int parameterIndex, final InputStream x, final long length ) throws SQLException {
    _callableStatement.setBinaryStream( parameterIndex, x, length );
  }




  @Override
  public void setBinaryStream( final String parameterName, final InputStream x ) throws SQLException {
    _callableStatement.setBinaryStream( parameterName, x );
  }




  @Override
  public void setBinaryStream( final String parameterName, final InputStream x, final int length ) throws SQLException {
    _callableStatement.setBinaryStream( parameterName, x, length );
  }




  @Override
  public void setBinaryStream( final String parameterName, final InputStream x, final long length ) throws SQLException {
    _callableStatement.setBinaryStream( parameterName, x, length );
  }




  @Override
  public void setBlob( final int parameterIndex, final Blob x ) throws SQLException {
    _callableStatement.setBlob( parameterIndex, x );
  }




  @Override
  public void setBlob( final int parameterIndex, final InputStream inputStream ) throws SQLException {
    _callableStatement.setBlob( parameterIndex, inputStream );
  }




  @Override
  public void setBlob( final int parameterIndex, final InputStream inputStream, final long length ) throws SQLException {
    _callableStatement.setBlob( parameterIndex, inputStream, length );
  }




  @Override
  public void setBlob( final String parameterName, final Blob x ) throws SQLException {
    _callableStatement.setBlob( parameterName, x );
  }




  @Override
  public void setBlob( final String parameterName, final InputStream inputStream ) throws SQLException {
    _callableStatement.setBlob( parameterName, inputStream );
  }




  @Override
  public void setBlob( final String parameterName, final InputStream inputStream, final long length ) throws SQLException {
    _callableStatement.setBlob( parameterName, inputStream, length );
  }




  @Override
  public void setBoolean( final int parameterIndex, final boolean x ) throws SQLException {
    _callableStatement.setBoolean( parameterIndex, x );
  }




  @Override
  public void setBoolean( final String parameterName, final boolean x ) throws SQLException {
    _callableStatement.setBoolean( parameterName, x );
  }




  @Override
  public void setByte( final int parameterIndex, final byte x ) throws SQLException {
    _callableStatement.setByte( parameterIndex, x );
  }




  @Override
  public void setByte( final String parameterName, final byte x ) throws SQLException {
    _callableStatement.setByte( parameterName, x );
  }




  @Override
  public void setBytes( final int parameterIndex, final byte[] x ) throws SQLException {
    _callableStatement.setBytes( parameterIndex, x );
  }




  @Override
  public void setBytes( final String parameterName, final byte[] x ) throws SQLException {
    _callableStatement.setBytes( parameterName, x );
  }




  @Override
  public void setCharacterStream( final int parameterIndex, final Reader reader ) throws SQLException {
    _callableStatement.setCharacterStream( parameterIndex, reader );
  }




  @Override
  public void setCharacterStream( final int parameterIndex, final Reader reader, final int length ) throws SQLException {
    _callableStatement.setCharacterStream( parameterIndex, reader, length );
  }




  @Override
  public void setCharacterStream( final int parameterIndex, final Reader reader, final long length ) throws SQLException {
    _callableStatement.setCharacterStream( parameterIndex, reader, length );
  }




  @Override
  public void setCharacterStream( final String parameterName, final Reader reader ) throws SQLException {
    _callableStatement.setCharacterStream( parameterName, reader );
  }




  @Override
  public void setCharacterStream( final String parameterName, final Reader reader, final int length ) throws SQLException {
    _callableStatement.setCharacterStream( parameterName, reader, length );
  }




  @Override
  public void setCharacterStream( final String parameterName, final Reader reader, final long length ) throws SQLException {
    _callableStatement.setCharacterStream( parameterName, reader, length );
  }




  @Override
  public void setClob( final int parameterIndex, final Clob x ) throws SQLException {
    _callableStatement.setClob( parameterIndex, x );
  }




  @Override
  public void setClob( final int parameterIndex, final Reader reader ) throws SQLException {
    _callableStatement.setClob( parameterIndex, reader );
  }




  @Override
  public void setClob( final int parameterIndex, final Reader reader, final long length ) throws SQLException {
    _callableStatement.setClob( parameterIndex, reader, length );
  }




  @Override
  public void setClob( final String parameterName, final Clob x ) throws SQLException {
    _callableStatement.setClob( parameterName, x );
  }




  @Override
  public void setClob( final String parameterName, final Reader reader ) throws SQLException {
    _callableStatement.setClob( parameterName, reader );
  }




  @Override
  public void setClob( final String parameterName, final Reader reader, final long length ) throws SQLException {
    _callableStatement.setClob( parameterName, reader, length );
  }




  @Override
  public void setCursorName( final String name ) throws SQLException {
    _callableStatement.setCursorName( name );
  }




  @Override
  public void setDate( final int parameterIndex, final Date x ) throws SQLException {
    _callableStatement.setDate( parameterIndex, x );
  }




  @Override
  public void setDate( final int parameterIndex, final Date x, final Calendar cal ) throws SQLException {
    _callableStatement.setDate( parameterIndex, x, cal );
  }




  @Override
  public void setDate( final String parameterName, final Date x ) throws SQLException {
    _callableStatement.setDate( parameterName, x );
  }




  @Override
  public void setDate( final String parameterName, final Date x, final Calendar cal ) throws SQLException {
    _callableStatement.setDate( parameterName, x, cal );
  }




  @Override
  public void setDouble( final int parameterIndex, final double x ) throws SQLException {
    _callableStatement.setDouble( parameterIndex, x );
  }




  @Override
  public void setDouble( final String parameterName, final double x ) throws SQLException {
    _callableStatement.setDouble( parameterName, x );
  }




  @Override
  public void setEscapeProcessing( final boolean enable ) throws SQLException {
    _callableStatement.setEscapeProcessing( enable );
  }




  @Override
  public void setFetchDirection( final int direction ) throws SQLException {
    _callableStatement.setFetchDirection( direction );
  }




  @Override
  public void setFetchSize( final int rows ) throws SQLException {
    _callableStatement.setFetchSize( rows );
  }




  @Override
  public void setFloat( final int parameterIndex, final float x ) throws SQLException {
    _callableStatement.setFloat( parameterIndex, x );
  }




  @Override
  public void setFloat( final String parameterName, final float x ) throws SQLException {
    _callableStatement.setFloat( parameterName, x );
  }




  @Override
  public void setInt( final int parameterIndex, final int x ) throws SQLException {
    _callableStatement.setInt( parameterIndex, x );
  }




  @Override
  public void setInt( final String parameterName, final int x ) throws SQLException {
    _callableStatement.setInt( parameterName, x );
  }




  @Override
  public void setLong( final int parameterIndex, final long x ) throws SQLException {
    _callableStatement.setLong( parameterIndex, x );
  }




  @Override
  public void setLong( final String parameterName, final long x ) throws SQLException {
    _callableStatement.setLong( parameterName, x );
  }




  @Override
  public void setMaxFieldSize( final int max ) throws SQLException {
    _callableStatement.setMaxFieldSize( max );
  }




  @Override
  public void setMaxRows( final int max ) throws SQLException {
    _callableStatement.setMaxRows( max );
  }




  @Override
  public void setNCharacterStream( final int parameterIndex, final Reader value ) throws SQLException {
    _callableStatement.setNCharacterStream( parameterIndex, value );
  }




  @Override
  public void setNCharacterStream( final int parameterIndex, final Reader value, final long length ) throws SQLException {
    _callableStatement.setNCharacterStream( parameterIndex, value, length );
  }




  @Override
  public void setNCharacterStream( final String parameterName, final Reader value ) throws SQLException {
    _callableStatement.setNCharacterStream( parameterName, value );
  }




  @Override
  public void setNCharacterStream( final String parameterName, final Reader value, final long length ) throws SQLException {
    _callableStatement.setNCharacterStream( parameterName, value, length );
  }




  @Override
  public void setNClob( final int parameterIndex, final NClob value ) throws SQLException {
    _callableStatement.setNClob( parameterIndex, value );
  }




  @Override
  public void setNClob( final int parameterIndex, final Reader reader ) throws SQLException {
    _callableStatement.setNClob( parameterIndex, reader );
  }




  @Override
  public void setNClob( final int parameterIndex, final Reader reader, final long length ) throws SQLException {
    _callableStatement.setNClob( parameterIndex, reader, length );
  }




  @Override
  public void setNClob( final String parameterName, final NClob value ) throws SQLException {
    _callableStatement.setNClob( parameterName, value );
  }




  @Override
  public void setNClob( final String parameterName, final Reader reader ) throws SQLException {
    _callableStatement.setNClob( parameterName, reader );
  }




  @Override
  public void setNClob( final String parameterName, final Reader reader, final long length ) throws SQLException {
    _callableStatement.setNClob( parameterName, reader, length );
  }




  @Override
  public void setNString( final int parameterIndex, final String value ) throws SQLException {
    _callableStatement.setNString( parameterIndex, value );
  }




  @Override
  public void setNString( final String parameterName, final String value ) throws SQLException {
    _callableStatement.setNString( parameterName, value );
  }




  @Override
  public void setNull( final int parameterIndex, final int sqlType ) throws SQLException {
    _callableStatement.setNull( parameterIndex, sqlType );
  }




  @Override
  public void setNull( final int parameterIndex, final int sqlType, final String typeName ) throws SQLException {
    _callableStatement.setNull( parameterIndex, sqlType, typeName );
  }




  @Override
  public void setNull( final String parameterName, final int sqlType ) throws SQLException {
    _callableStatement.setNull( parameterName, sqlType );
  }




  @Override
  public void setNull( final String parameterName, final int sqlType, final String typeName ) throws SQLException {
    _callableStatement.setNull( parameterName, sqlType, typeName );
  }




  @Override
  public void setObject( final int parameterIndex, final Object x ) throws SQLException {
    _callableStatement.setObject( parameterIndex, x );
  }




  @Override
  public void setObject( final int parameterIndex, final Object x, final int targetSqlType ) throws SQLException {
    _callableStatement.setObject( parameterIndex, x, targetSqlType );
  }




  @Override
  public void setObject( final int parameterIndex, final Object x, final int targetSqlType, final int scaleOrLength ) throws SQLException {
    _callableStatement.setObject( parameterIndex, x, targetSqlType, scaleOrLength );
  }




  @Override
  public void setObject( final String parameterName, final Object x ) throws SQLException {
    _callableStatement.setObject( parameterName, x );
  }




  @Override
  public void setObject( final String parameterName, final Object x, final int targetSqlType ) throws SQLException {
    _callableStatement.setObject( parameterName, x, targetSqlType );
  }




  @Override
  public void setObject( final String parameterName, final Object x, final int targetSqlType, final int scale ) throws SQLException {
    _callableStatement.setObject( parameterName, x, targetSqlType, scale );
  }




  @Override
  public void setPoolable( final boolean poolable ) throws SQLException {
    _callableStatement.setPoolable( poolable );
  }




  @Override
  public void setQueryTimeout( final int seconds ) throws SQLException {
    _callableStatement.setQueryTimeout( seconds );
  }




  @Override
  public void setRef( final int parameterIndex, final Ref x ) throws SQLException {
    _callableStatement.setRef( parameterIndex, x );
  }




  @Override
  public void setRowId( final int parameterIndex, final RowId x ) throws SQLException {
    _callableStatement.setRowId( parameterIndex, x );
  }




  @Override
  public void setRowId( final String parameterName, final RowId x ) throws SQLException {
    _callableStatement.setRowId( parameterName, x );
  }




  @Override
  public void setShort( final int parameterIndex, final short x ) throws SQLException {
    _callableStatement.setShort( parameterIndex, x );
  }




  @Override
  public void setShort( final String parameterName, final short x ) throws SQLException {
    _callableStatement.setShort( parameterName, x );
  }




  @Override
  public void setSQLXML( final int parameterIndex, final SQLXML xmlObject ) throws SQLException {
    _callableStatement.setSQLXML( parameterIndex, xmlObject );
  }




  @Override
  public void setSQLXML( final String parameterName, final SQLXML xmlObject ) throws SQLException {
    _callableStatement.setSQLXML( parameterName, xmlObject );
  }




  @Override
  public void setString( final int parameterIndex, final String x ) throws SQLException {
    _callableStatement.setString( parameterIndex, x );
  }




  @Override
  public void setString( final String parameterName, final String x ) throws SQLException {
    _callableStatement.setString( parameterName, x );
  }




  @Override
  public void setTime( final int parameterIndex, final Time x ) throws SQLException {
    _callableStatement.setTime( parameterIndex, x );
  }




  @Override
  public void setTime( final int parameterIndex, final Time x, final Calendar cal ) throws SQLException {
    _callableStatement.setTime( parameterIndex, x, cal );
  }




  @Override
  public void setTime( final String parameterName, final Time x ) throws SQLException {
    _callableStatement.setTime( parameterName, x );
  }




  @Override
  public void setTime( final String parameterName, final Time x, final Calendar cal ) throws SQLException {
    _callableStatement.setTime( parameterName, x, cal );
  }




  @Override
  public void setTimestamp( final int parameterIndex, final Timestamp x ) throws SQLException {
    _callableStatement.setTimestamp( parameterIndex, x );
  }




  @Override
  public void setTimestamp( final int parameterIndex, final Timestamp x, final Calendar cal ) throws SQLException {
    _callableStatement.setTimestamp( parameterIndex, x, cal );
  }




  @Override
  public void setTimestamp( final String parameterName, final Timestamp x ) throws SQLException {
    _callableStatement.setTimestamp( parameterName, x );
  }




  @Override
  public void setTimestamp( final String parameterName, final Timestamp x, final Calendar cal ) throws SQLException {
    _callableStatement.setTimestamp( parameterName, x, cal );
  }




  @Override
  public void setUnicodeStream( final int parameterIndex, final InputStream x, final int length ) throws SQLException {
    _callableStatement.setUnicodeStream( parameterIndex, x, length );
  }




  @Override
  public void setURL( final int parameterIndex, final URL x ) throws SQLException {
    _callableStatement.setURL( parameterIndex, x );
  }




  @Override
  public void setURL( final String parameterName, final URL val ) throws SQLException {
    _callableStatement.setURL( parameterName, val );
  }




  @Override
  public <T> T unwrap( final Class<T> iface ) throws SQLException {
    return _callableStatement.unwrap( iface );
  }




  @Override
  public boolean wasNull() throws SQLException {
    return _callableStatement.wasNull();
  }
}
